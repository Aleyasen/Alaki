<?php

/**
 * This is the model base class for the table "tbl_cluster".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "Cluster".
 *
 * Columns in table "tbl_cluster" available as properties of the model,
 * followed by relations of table "tbl_cluster" available as properties of the model.
 *
 * @property string $id
 * @property string $name
 * @property string $clustering
 * @property integer $deleted
 * @property string $sup_cluster
 * @property integer $level
 * @property integer $friendsCount
 * @property integer $corFriendsCount
 * @property integer $innerEdges
 * @property integer $outerEdges
 * @property double $internalDensity
 * @property double $averageDegree
 * @property double $TPR
 * @property double $expansion
 * @property double $cutRation
 * @property double $conductance
 * @property integer $innerEdgesB
 * @property integer $outerEdgesB
 * @property double $internalDensityB
 * @property double $averageDegreeB
 * @property double $TPRB
 * @property double $expansionB
 * @property double $cutRationB
 * @property double $conductanceB
 * @property string $final_group
 *
 * @property Cgroup[] $cgroups
 * @property Cgroup[] $cgroups1
 * @property Cgroup[] $cgroups2
 * @property Clustering $clustering0
 * @property FriendCluster[] $friendClusters
 * @property FriendCluster[] $friendClusters1
 */
abstract class BaseCluster extends GxActiveRecord {

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return 'tbl_cluster';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'Cluster|Clusters', $n);
	}

	public static function representingColumn() {
		return 'name';
	}

	public function rules() {
		return array(
			array('deleted, level, friendsCount, corFriendsCount, innerEdges, outerEdges, innerEdgesB, outerEdgesB', 'numerical', 'integerOnly'=>true),
			array('internalDensity, averageDegree, TPR, expansion, cutRation, conductance, internalDensityB, averageDegreeB, TPRB, expansionB, cutRationB, conductanceB', 'numerical'),
			array('name', 'length', 'max'=>256),
			array('clustering, sup_cluster, final_group', 'length', 'max'=>20),
			array('name, clustering, deleted, sup_cluster, level, friendsCount, corFriendsCount, innerEdges, outerEdges, internalDensity, averageDegree, TPR, expansion, cutRation, conductance, innerEdgesB, outerEdgesB, internalDensityB, averageDegreeB, TPRB, expansionB, cutRationB, conductanceB, final_group', 'default', 'setOnEmpty' => true, 'value' => null),
			array('id, name, clustering, deleted, sup_cluster, level, friendsCount, corFriendsCount, innerEdges, outerEdges, internalDensity, averageDegree, TPR, expansion, cutRation, conductance, innerEdgesB, outerEdgesB, internalDensityB, averageDegreeB, TPRB, expansionB, cutRationB, conductanceB, final_group', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
			'cgroups' => array(self::HAS_MANY, 'Cgroup', 'clus_mcl'),
			'cgroups1' => array(self::HAS_MANY, 'Cgroup', 'clus_louvain'),
			'cgroups2' => array(self::HAS_MANY, 'Cgroup', 'clus_oslom'),
			'clustering0' => array(self::BELONGS_TO, 'Clustering', 'clustering'),
			'friendClusters' => array(self::HAS_MANY, 'FriendCluster', 'cluster'),
			'friendClusters1' => array(self::HAS_MANY, 'FriendCluster', 'cor_cluster'),
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
			'id' => Yii::t('app', 'ID'),
			'name' => Yii::t('app', 'Name'),
			'clustering' => null,
			'deleted' => Yii::t('app', 'Deleted'),
			'sup_cluster' => Yii::t('app', 'Sup Cluster'),
			'level' => Yii::t('app', 'Level'),
			'friendsCount' => Yii::t('app', 'Friends Count'),
			'corFriendsCount' => Yii::t('app', 'Cor Friends Count'),
			'innerEdges' => Yii::t('app', 'Inner Edges'),
			'outerEdges' => Yii::t('app', 'Outer Edges'),
			'internalDensity' => Yii::t('app', 'Internal Density'),
			'averageDegree' => Yii::t('app', 'Average Degree'),
			'TPR' => Yii::t('app', 'Tpr'),
			'expansion' => Yii::t('app', 'Expansion'),
			'cutRation' => Yii::t('app', 'Cut Ration'),
			'conductance' => Yii::t('app', 'Conductance'),
			'innerEdgesB' => Yii::t('app', 'Inner Edges B'),
			'outerEdgesB' => Yii::t('app', 'Outer Edges B'),
			'internalDensityB' => Yii::t('app', 'Internal Density B'),
			'averageDegreeB' => Yii::t('app', 'Average Degree B'),
			'TPRB' => Yii::t('app', 'Tprb'),
			'expansionB' => Yii::t('app', 'Expansion B'),
			'cutRationB' => Yii::t('app', 'Cut Ration B'),
			'conductanceB' => Yii::t('app', 'Conductance B'),
			'final_group' => Yii::t('app', 'Final Group'),
			'cgroups' => null,
			'cgroups1' => null,
			'cgroups2' => null,
			'clustering0' => null,
			'friendClusters' => null,
			'friendClusters1' => null,
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('id', $this->id, true);
		$criteria->compare('name', $this->name, true);
		$criteria->compare('clustering', $this->clustering);
		$criteria->compare('deleted', $this->deleted);
		$criteria->compare('sup_cluster', $this->sup_cluster, true);
		$criteria->compare('level', $this->level);
		$criteria->compare('friendsCount', $this->friendsCount);
		$criteria->compare('corFriendsCount', $this->corFriendsCount);
		$criteria->compare('innerEdges', $this->innerEdges);
		$criteria->compare('outerEdges', $this->outerEdges);
		$criteria->compare('internalDensity', $this->internalDensity);
		$criteria->compare('averageDegree', $this->averageDegree);
		$criteria->compare('TPR', $this->TPR);
		$criteria->compare('expansion', $this->expansion);
		$criteria->compare('cutRation', $this->cutRation);
		$criteria->compare('conductance', $this->conductance);
		$criteria->compare('innerEdgesB', $this->innerEdgesB);
		$criteria->compare('outerEdgesB', $this->outerEdgesB);
		$criteria->compare('internalDensityB', $this->internalDensityB);
		$criteria->compare('averageDegreeB', $this->averageDegreeB);
		$criteria->compare('TPRB', $this->TPRB);
		$criteria->compare('expansionB', $this->expansionB);
		$criteria->compare('cutRationB', $this->cutRationB);
		$criteria->compare('conductanceB', $this->conductanceB);
		$criteria->compare('final_group', $this->final_group, true);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}
}